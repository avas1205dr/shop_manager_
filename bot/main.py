import telebot
import threading
import logging
import os
import uuid
import sqlite3

import database as database
import keyboards as keyboards
import shop_bot
from states import UserState
from telebot import types

logging.basicConfig(level=logging.ERROR)

user_product_messages = {}
active_shop_bots = {}
user_states = {}

BOT_TOKEN = "7793591374:AAHYhGqYiNgg3EqKvSJFHsFxGCgpEKw7mgk"
bot = telebot.TeleBot(BOT_TOKEN)

@bot.message_handler(commands=['start'])
def start_handler(message):
    database.add_user(message.from_user.id, message.from_user.username)
    user_id = message.from_user.id
    user_states[user_id] = UserState.MAIN_MENU
    
    welcome_text = """üõçÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Shop Manager Bot!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –º–∞–≥–∞–∑–∏–Ω–Ω—ã–º–∏ –±–æ—Ç–∞–º–∏ –≤ Telegram.

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–æ–≤ –∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
    
    bot.send_message(message.chat.id, welcome_text, reply_markup=keyboards.create_main_menu())

@bot.message_handler(commands=['get_id'])
def get_user_id_handler(message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name or ""
    last_name = message.from_user.last_name or ""
    
    response = f"üìã –í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
    response += f"üÜî ID: {user_id}\n"
    response += f"üë§ –ò–º—è: {first_name} {last_name}".strip()
    if username:
        response += f"\nüìß Username: @{username}"
    
    bot.send_message(message.chat.id, response)

@bot.callback_query_handler(func=lambda call: call.data.startswith("show_product_"))
def show_manager_product(call):
    parts = call.data.split("_")
    if len(parts) < 5:
        bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return
    product_id = int(parts[2])
    category_id = int(parts[3])
    page = int(parts[4])
    product = database.get_product_info(product_id)
    if not product:
        bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    prod_id, cat_id, name, desc, price, image_path, created_at, popularity_score = product
    text = f"{name}\n–¶–µ–Ω–∞: {price}‚ÇΩ\n–û–ø–∏—Å–∞–Ω–∏–µ: {desc or '–ù–µ—Ç'}"
    markup = keyboards.create_edit_product_menu(product_id, category_id, page)
    
    if image_path and os.path.exists(image_path) and "default_not_image" not in image_path:
        with open(image_path, 'rb') as photo:
            bot.send_photo(call.message.chat.id, photo, caption=text, reply_markup=markup)
    else:
        bot.send_message(call.message.chat.id, text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "back_from_desc")
def handle_back_from_desc(call):
    user_id = call.from_user.id
    user_states[user_id] = UserState.PRODUCT_PRICE
    bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ):\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        call.message.chat.id,
        call.message.message_id
    )

@bot.callback_query_handler(func=lambda call: call.data == "default_image")
def handle_default_image(call):
    user_id = call.from_user.id
    category_id = user_states.get(f"{user_id}_category_id")
    product_name = user_states.get(f"{user_id}_product_name")
    product_price = user_states.get(f"{user_id}_product_price")
    description = user_states.get(f"{user_id}_product_description")
    
    image_path = "work_photos/default_not_image.jpg"
    product_id = database.add_product(category_id, product_name, product_price, image_path, description)
    
    if product_id:
        bot.answer_callback_query(call.id, "‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")
        bot.send_message(
            call.message.chat.id,
            "üì¶ –¢–æ–≤–∞—Ä—ã –≤ —Ä–∞–∑–¥–µ–ª–µ:",
            reply_markup=keyboards.create_products_menu(category_id))
    else:
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")
    
    user_states[user_id] = UserState.SHOP_MENU
    for key in [f"{user_id}_category_id", f"{user_id}_product_name", 
                f"{user_id}_product_price", f"{user_id}_product_description"]:
        if key in user_states:
            del user_states[key]

@bot.callback_query_handler(func=lambda call: call.data == "skip_image")
def handle_skip_image(call):
    user_id = call.from_user.id
    category_id = user_states.get(f"{user_id}_category_id")
    product_name = user_states.get(f"{user_id}_product_name")
    product_price = user_states.get(f"{user_id}_product_price")
    description = user_states.get(f"{user_id}_product_description")
    
    product_id = database.add_product(category_id, product_name, product_price, None, description)
    
    if product_id:
        bot.answer_callback_query(call.id, "‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        bot.send_message(
            call.message.chat.id,
            "üì¶ –¢–æ–≤–∞—Ä—ã –≤ —Ä–∞–∑–¥–µ–ª–µ:",
            reply_markup=keyboards.create_products_menu(category_id))
    else:
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")
    
    user_states[user_id] = UserState.SHOP_MENU
    for key in [f"{user_id}_category_id", f"{user_id}_product_name", 
                f"{user_id}_product_price", f"{user_id}_product_description"]:
        if key in user_states:
            del user_states[key]

@bot.callback_query_handler(func=lambda call: call.data == "back_from_image")
def handle_back_from_image(call):
    user_id = call.from_user.id
    user_states[user_id] = UserState.PRODUCT_DESCRIPTION
    bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
        call.message.chat.id,
        call.message.message_id
    )

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == UserState.ADDING_WORKER)
def add_worker_handler(message):
    user_id = message.from_user.id
    shop_id = user_states.get(f"{user_id}_shop_id")
    admin_input = message.text.strip()
    
    if admin_input.lower() == '–Ω–∞–∑–∞–¥':
        user_states[user_id] = UserState.SHOP_MENU
        bot.send_message(
            message.chat.id,
            "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=keyboards.create_shop_management_menu(shop_id))
        return
    
    admin_user_id = None
    username = None
    if admin_input.startswith('@'):
        username = admin_input[1:]
        conn = sqlite3.connect(database.DB_NAME)
        cursor = conn.cursor()
        
        cursor.execute("SELECT tg_id FROM users WHERE username = ?", (username,))
        result = cursor.fetchone()
        
        if result:
            admin_user_id = result[0]
        else:
            cursor.execute("INSERT INTO users (username) VALUES (?)", (username,))
            admin_user_id = cursor.lastrowid
            conn.commit()
        conn.close()
    else:
        try:
            admin_user_id = int(admin_input)
            conn = sqlite3.connect(database.DB_NAME)
            cursor = conn.cursor()
            
            cursor.execute("SELECT tg_id, username FROM users WHERE tg_id = ?", (admin_user_id,))
            result = cursor.fetchone()
            if result:
                username = result[1]
            else:
                cursor.execute("INSERT INTO users (tg_id) VALUES (?)", (admin_user_id,))
                conn.commit()
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π @username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        finally:
            conn.close()
    
    if not admin_user_id:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    shop_info = database.get_shop_info(shop_id)
    if not shop_info:
        bot.send_message(message.chat.id, "‚ùå –ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if shop_info[1] != user_id:
        bot.send_message(message.chat.id, "‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–∞–≥–∞–∑–∏–Ω–∞ –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤")
        return
    
    if admin_user_id == shop_info[1]:
        bot.send_message(message.chat.id, "‚ùå –í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —ç—Ç–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞")
        return
    
    conn = sqlite3.connect(database.DB_NAME)
    cursor = conn.cursor()
    
    cursor.execute("""
        INSERT OR IGNORE INTO shop_admins (shop_id, user_id) 
        VALUES (?, ?)
    """, (shop_id, admin_user_id))
    
    affected_rows = cursor.rowcount
    conn.commit()
    conn.close()
    
    if affected_rows > 0:
        worker_message = f"üéâ –í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫ –º–∞–≥–∞–∑–∏–Ω–∞ '{shop_info[2]}'!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–∏–º –º–∞–≥–∞–∑–∏–Ω–æ–º —á–µ—Ä–µ–∑ @{bot.get_me().username}"
        try:
            bot.send_message(admin_user_id, worker_message)
        except:
            pass
        
        admins = database.get_shop_workers(shop_id)
        worker_display = f"@{username} (ID: {admin_user_id})" if username else f"User ID: {admin_user_id}"
        admin_message = f"–¢–æ–ª—å–∫–æ —á—Ç–æ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: {worker_display} –≤ –º–∞–≥–∞–∑–∏–Ω '{shop_info[2]}'"
        for admin_id, _ in admins:
            try:
                bot.send_message(admin_id, admin_message)
            except:
                pass
        
        bot.send_message(
            message.chat.id,
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_input} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫",
            reply_markup=keyboards.create_shop_management_menu(shop_id))
    else:
        bot.send_message(
            message.chat.id,
            f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_input} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–º",
            reply_markup=keyboards.create_shop_management_menu(shop_id))
    
    user_states[user_id] = UserState.SHOP_MENU

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == UserState.EDITING_PAYMENT)
def save_payment_credentials(message):
    user_id = message.from_user.id
    shop_id = user_states.get(f"{user_id}_shop_id")
    credentials = message.text.strip()
    
    if credentials.lower() == '–Ω–∞–∑–∞–¥':
        user_states[user_id] = UserState.SHOP_MENU
        bot.send_message(
            message.chat.id,
            "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø–ª–∞—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=keyboards.create_shop_management_menu(shop_id))
        return
    
    if ":" not in credentials:
        bot.send_message(message.chat.id, "‚ùå –§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ ShopID:SecretKey –∏–ª–∏ '–Ω–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã")
        return
    
    conn = sqlite3.connect(database.DB_NAME)
    cursor = conn.cursor()
    cursor.execute("UPDATE shops SET payment_method = 'online', yookassa_credentials = ? WHERE id = ?", (credentials, shop_id))
    conn.commit()
    conn.close()
    
    bot.send_message(
        message.chat.id,
        "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ÆKassa —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!",
        reply_markup=keyboards.create_shop_management_menu(shop_id))
    user_states[user_id] = UserState.SHOP_MENU

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = call.from_user.id
    data = call.data
    try:
        if data == "main_menu":
            user_states[user_id] = UserState.MAIN_MENU
            bot.edit_message_text(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.create_main_menu()
            )
        
        elif data == "reviews":
            bot.edit_message_text(
                "üìä –†–µ–π—Ç–∏–Ω–≥ –º–∞–≥–∞–∑–∏–Ω–æ–≤\n\n–ú–∞–≥–∞–∑–∏–Ω—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.create_reviews_menu()
            )
        
        elif data.startswith("reviews_page_"):
            page = int(data.split("_")[-1])
            bot.edit_message_text(
                "üìä –†–µ–π—Ç–∏–Ω–≥ –º–∞–≥–∞–∑–∏–Ω–æ–≤\n\n–ú–∞–≥–∞–∑–∏–Ω—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.create_reviews_menu(page)
            )
        
        elif data.startswith("shop_detail_"):
            shop_id = int(data.split("_")[-1])
            show_shop_detail(call, shop_id)
        
        elif data == "my_shops":
            bot.edit_message_text(
                "üè™ –í–∞—à–∏ –º–∞–≥–∞–∑–∏–Ω—ã:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.create_my_shops_menu(user_id)
            )
        
        elif data == "create_shop":
            user_states[user_id] = UserState.CREATING_SHOP
            bot.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞):\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.create_back_button_menu("my_shops")
            )
        
        elif data.startswith("manage_shop_"):
            shop_id = int(data.split("_")[-1])
            show_shop_management(call, shop_id)
        
        elif data.startswith("edit_token_"):
            shop_id = int(data.split("_")[-1])
            user_states[user_id] = UserState.EDITING_TOKEN
            user_states[f"{user_id}_shop_id"] = shop_id
            
            shop_info = database.get_shop_info(shop_id)
            current_token = shop_info[3] if shop_info and shop_info[3] else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            
            bot.edit_message_text(
                f"üîë –¢–æ–∫–µ–Ω API –±–æ—Ç–∞\n\n–¢–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω: {current_token}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω (–º–∏–Ω–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤):\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.create_back_button_menu(f"manage_shop_{shop_id}"))
        
        elif data == "botfather_instruction":
            instruction_text = """üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é —Ç–æ–∫–µ–Ω–∞ –æ—Ç BotFather:

1Ô∏è‚É£ –ù–∞–π–¥–∏—Ç–µ @BotFather –≤ Telegram
2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /newbot
3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
4Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ username –±–æ—Ç–∞ (–¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ 'bot')
5Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
6Ô∏è‚É£ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞

‚ö†Ô∏è –¢–æ–∫–µ–Ω –≤—ã–≥–ª—è–¥–∏—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫:
123456789:ABCdefGHIjklMNOpqrsTUVwxyz"""
            
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"manage_shop_{user_states.get(f'{call.from_user.id}_shop_id', '')}"))
            
            bot.edit_message_text(
                instruction_text,
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )
        
        elif data.startswith("manage_products_"):
            shop_id = int(data.split("_")[-1])
            bot.edit_message_text(
                "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.create_categories_menu(shop_id))
        
        elif data.startswith("create_category_"):
            shop_id = int(data.split("_")[-1])
            user_states[user_id] = UserState.CREATING_CATEGORY
            user_states[f"{user_id}_shop_id"] = shop_id
            
            bot.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞):\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.create_back_button_menu(f"manage_products_{shop_id}"))
        
        elif data.startswith("category_"):
            category_id = int(data.split("_")[-1])
            bot.edit_message_text(
                "üì¶ –î–µ–π—Å—Ç–≤–∏—è —Å —Ä–∞–∑–¥–µ–ª–æ–º:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.create_category_actions_menu(category_id))
        
        elif data.startswith("view_products_"):
            category_id = int(data.split("_")[-1])
            bot.edit_message_text(
                "üì¶ –¢–æ–≤–∞—Ä—ã –≤ —Ä–∞–∑–¥–µ–ª–µ:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.create_products_menu(category_id))
        
        elif data.startswith("show_product_"):
            parts = data.split("_")
            if len(parts) < 5:
                bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                return
            product_id = int(parts[2])
            category_id = int(parts[3])
            page = int(parts[4])
            show_manager_product(call, product_id, category_id, page)

        elif data.startswith("add_product_"):
            category_id = int(data.split("_")[-1])
            user_states[user_id] = UserState.PRODUCT_NAME
            user_states[f"{user_id}_category_id"] = category_id
            
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"category_{category_id}"))
            
            bot.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞):",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )
        
        elif data.startswith("payment_method_"):
            shop_id = int(data.split("_")[-1])
            markup = types.InlineKeyboardMarkup(row_width=2)
            markup.add(
                types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∞ –Ω–∞ –º–µ—Å—Ç–µ", callback_data=f"set_payment_cash_{shop_id}"),
                types.InlineKeyboardButton("–û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞ (–ÆKassa)", callback_data=f"set_payment_online_{shop_id}"))
            markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"manage_shop_{shop_id}"))
            bot.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )
        
        elif data.startswith("set_payment_"):
            shop_id = int(data.split("_")[-1])
            payment_type = "cash_on_delivery" if data.startswith("set_payment_cash_") else "online"
            user_states[user_id] = UserState.EDITING_PAYMENT if payment_type == "online" else UserState.SHOP_MENU
            
            if payment_type == "cash_on_delivery":
                conn = sqlite3.connect(database.DB_NAME)
                cursor = conn.cursor()
                cursor.execute("UPDATE shops SET payment_method = ? WHERE id = ?", (payment_type, shop_id))
                conn.commit()
                conn.close()
                bot.edit_message_text(
                    "‚úÖ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –û–ø–ª–∞—Ç–∞ –Ω–∞ –º–µ—Å—Ç–µ",
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=keyboards.create_shop_management_menu(shop_id))
            else:
                bot.edit_message_text(
                    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ÆKassa:
1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ https://yookassa.ru/
2. –ü–æ–ª—É—á–∏—Ç–µ Shop ID –∏ Secret Key –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ
3. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ShopID:SecretKey
–ü—Ä–∏–º–µ—Ä: 123456:live_xxxxxxxxxxxxxxxxxxxxxxxxxxxx

–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã""",
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=keyboards.create_back_button_menu(f"payment_method_{shop_id}"))
        
        elif data.startswith("edit_welcome_"):
            shop_id = int(data.split("_")[-1])
            user_states[user_id] = UserState.EDITING_WELCOME
            user_states[f"{user_id}_shop_id"] = shop_id
            
            bot.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤):\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.create_back_button_menu(f"manage_shop_{shop_id}"))
        
        elif data.startswith("delete_shop_"):
            shop_id = int(data.split("_")[-1])
            shop_info = database.get_shop_info(shop_id)
            if not shop_info:
                bot.answer_callback_query(call.id, "–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            if shop_info[1] != user_id:
                bot.answer_callback_query(call.id, "–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–∞–≥–∞–∑–∏–Ω–∞ –º–æ–∂–µ—Ç –µ–≥–æ —É–¥–∞–ª–∏—Ç—å")
                return
                
            conn = sqlite3.connect(database.DB_NAME)
            cursor = conn.cursor()
            cursor.execute("DELETE FROM shops WHERE id = ?", (shop_id,))
            conn.commit()
            conn.close()
            if shop_id in active_shop_bots:
                try:
                    active_shop_bots[shop_id].stop_polling()
                except:
                    pass
                del active_shop_bots[shop_id]
            bot.edit_message_text(
                "‚úÖ –ú–∞–≥–∞–∑–∏–Ω —É–¥–∞–ª—ë–Ω",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.create_my_shops_menu(user_id))
        
        elif data == "get_user_id_info":
            bot.edit_message_text(
                "üÜî –ö–∞–∫ —É–∑–Ω–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
                "1Ô∏è‚É£ –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /get_id –≤ —ç—Ç–æ–º –±–æ—Ç–µ\n"
                "2Ô∏è‚É£ –ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç –µ–≥–æ ID\n"
                "3Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç ID –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞\n\n"
                "üí° ID –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"manage_shop_{user_states.get(f'{call.from_user.id}_shop_id', '')}"))
                )
        
        elif data.startswith("workers_"):
            shop_id = int(data.split("_")[1])
            bot.edit_message_text(
                "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º–∏ –º–∞–≥–∞–∑–∏–Ω–∞:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.create_workers_menu(shop_id))
        
        elif data.startswith("add_worker_"):
            shop_id = int(data.split("_")[2])
            user_states[user_id] = UserState.ADDING_WORKER
            user_states[f"{user_id}_shop_id"] = shop_id
            bot.edit_message_text(
                "üë§ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞\n\n"
                "–í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.create_back_button_menu(f"workers_{shop_id}"))
        
        elif data.startswith("list_workers_"):
            shop_id = int(data.split("_")[2])
            workers = database.get_shop_workers(shop_id)
            if not workers:
                bot.edit_message_text(
                    "–í –º–∞–≥–∞–∑–∏–Ω–µ –Ω–µ—Ç —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤",
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=keyboards.create_workers_menu(shop_id))
                return
            
            response = "üë• –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤:\n\n"
            for worker_id, username in workers:
                response += f"‚Ä¢ @{username} (ID: {worker_id})\n" if username else f"‚Ä¢ ID: {worker_id}\n"
            
            bot.edit_message_text(
                response,
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.create_workers_menu(shop_id))
        
        elif data.startswith("remove_worker_"):
            shop_id = int(data.split("_")[2])
            workers = database.get_shop_workers(shop_id)
            shop_info = database.get_shop_info(shop_id)
            owner_id = shop_info[1]
            workers = [(w[0], w[1]) for w in workers if w[0] != owner_id]
            
            if not workers:
                bot.answer_callback_query(call.id, "–ù–µ—Ç —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —É–≤–æ–ª—å–Ω–µ–Ω–∏—è")
                return
            
            bot.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –¥–ª—è —É–≤–æ–ª—å–Ω–µ–Ω–∏—è:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.create_remove_worker_menu(shop_id, workers))
        
        elif data.startswith("confirm_remove_"):
            parts = data.split("_")
            if len(parts) < 3:
                bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                return
            if "step2" in parts:
                shop_id = int(parts[3])
                worker_id = int(parts[4])
                bot.edit_message_text(
                    "–ê –≤–¥—Ä—É–≥ —É –Ω–µ–≥–æ —Å–µ–º—å—è?üò≠",
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=keyboards.create_confirm_remove_step2_menu(shop_id, worker_id))
            else:
                shop_id = int(parts[2])
                worker_id = int(parts[3])
                bot.edit_message_text(
                    "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–≤–æ–ª–∏—Ç—å —ç—Ç–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ (–º–æ–∂–µ—Ç –Ω–µ –Ω–∞–¥–æ)?",
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=keyboards.create_confirm_remove_menu(shop_id, worker_id))
        
        elif data.startswith("do_remove_"):
            parts = data.split("_")
            if len(parts) < 4:
                bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                return
            shop_id = int(parts[2])
            worker_id = int(parts[3])
            conn = sqlite3.connect(database.DB_NAME)
            cursor = conn.cursor()
            cursor.execute("SELECT username FROM users WHERE tg_id = ?", (worker_id,))
            result = cursor.fetchone()
            cursor.execute(f"""
                DELETE FROM shop_admins
                WHERE user_id = '{worker_id}' AND shop_id = '{shop_id}'
            """)
            username = result[0] if result else None
            conn.close()
            shop_info = database.get_shop_info(shop_id)
            if database.remove_worker(shop_id, worker_id):
                worker_message = f"–í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∫–∞–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ '{shop_info[2]}'"
                try:
                    bot.send_message(worker_id, worker_message)
                except:
                    pass
                
                admins = database.get_shop_workers(shop_id)
                worker_display = f"@{username} (ID: {worker_id})" if username else f"User ID: {worker_id}"
                admin_message = f"–ë—ã–ª —É–≤–æ–ª–µ–Ω —Ä–∞–±–æ—Ç–Ω–∏–∫: {worker_display} –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ '{shop_info[2]}'"
                for admin_id, _ in admins:
                    try:
                        bot.send_message(admin_id, admin_message)
                    except:
                        pass
                bot.answer_callback_query(call.id, "‚úÖ –†–∞–±–æ—Ç–Ω–∏–∫ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä—ã–Ω–æ–∫ —Ç—Ä—É–¥–∞")
            else:
                bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
            bot.edit_message_text(
                "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º–∏ –º–∞–≥–∞–∑–∏–Ω–∞:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.create_workers_menu(shop_id))
        
        elif data.startswith("edit_category_name_"):
            category_id = int(data.split("_")[-1])
            user_states[user_id] = UserState.EDITING_CATEGORY_NAME
            user_states[f"{user_id}_category_id"] = category_id
            bot.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞):\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.create_back_button_menu(f"category_{category_id}"))
        
        elif data.startswith("delete_category_"):
            category_id = int(data.split("_")[-1])
            if database.delete_category(category_id):
                shop_id = database.get_shop_id_by_category(category_id)
                bot.edit_message_text(
                    "‚úÖ –†–∞–∑–¥–µ–ª —É–¥–∞–ª—ë–Ω",
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=keyboards.create_categories_menu(shop_id))
            else:
                bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞–∑–¥–µ–ª–∞")
        
        elif data.startswith("product_"):
            parts = data.split("_")
            if len(parts) < 4:
                bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                return
            product_id = int(parts[1])
            category_id = int(parts[2])
            page = int(parts[3])
            user_states[user_id] = UserState.EDITING_PRODUCT
            bot.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.create_edit_product_menu(product_id, category_id, page))
        
        elif data.startswith("prev_page_"):
            parts = data.split("_")
            category_id = int(parts[2])
            page = int(parts[3])
            bot.edit_message_text(
                "üì¶ –¢–æ–≤–∞—Ä—ã –≤ —Ä–∞–∑–¥–µ–ª–µ:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.create_products_menu(category_id, page))
        
        elif data.startswith("next_page_"):
            parts = data.split("_")
            category_id = int(parts[2])
            page = int(parts[3])
            bot.edit_message_text(
                "üì¶ –¢–æ–≤–∞—Ä—ã –≤ —Ä–∞–∑–¥–µ–ª–µ:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.create_products_menu(category_id, page))
        
        elif data.startswith("edit_name_") or data.startswith("edit_price_") or data.startswith("edit_desc_") or data.startswith("edit_photo_"):
            parts = data.split("_")
            if len(parts) < 5:
                bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                return
            edit_type = parts[1]
            product_id = int(parts[2])
            category_id = int(parts[3])
            page = int(parts[4])
            user_states[user_id] = UserState.EDITING_PRODUCT
            user_states[f"{user_id}_edit_type"] = edit_type
            user_states[f"{user_id}_product_id"] = product_id
            user_states[f"{user_id}_category_id"] = category_id
            user_states[f"{user_id}_page"] = page
            
            prompt = {
                "name": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–º–∏–Ω 2 —Å–∏–º–≤–æ–ª–∞):\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                "price": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ):\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                "desc": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                "photo": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'/'—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ':\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã"
            }[edit_type]
            
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except:
                pass
            bot.send_message(
                call.message.chat.id,
                prompt,
                reply_markup=keyboards.create_back_button_menu(f"product_{product_id}_{category_id}_{page}")
            )
        
        elif data.startswith("delete_product_"):
            parts = data.split("_")
            if len(parts) < 4:
                bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                return
            product_id = int(parts[2])
            category_id = int(parts[3])
            page = int(parts[4])
            database.delete_product(product_id)
            bot.answer_callback_query(call.id, "‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω")
            bot.edit_message_text(
                "üì¶ –¢–æ–≤–∞—Ä—ã –≤ —Ä–∞–∑–¥–µ–ª–µ:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.create_products_menu(category_id, page))
        
        elif data.startswith("back_to_products_"):
            parts = data.split("_")
            if len(parts) < 4:
                bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                return
            category_id = int(parts[3])
            page = int(parts[4])
            bot.edit_message_text(
                "üì¶ –¢ —Ç–æ–≤–∞—Ä—ã –≤ —Ä–∞–∑–¥–µ–ª–µ:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.create_products_menu(category_id, page))
        
        elif data.startswith("all_products_"):
            shop_id = int(data.split("_")[-1])
            products = database.get_all_shop_products(shop_id)
            if not products:
                bot.edit_message_text(
                    "–í –º–∞–≥–∞–∑–∏–Ω–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.",
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=keyboards.create_back_button_menu(f"manage_shop_{shop_id}"))
                return
            
            text = "üì¶ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ:\n\n"
            for cat_name, name, price, desc in products:
                text += f"[{cat_name}] {name} - {price}‚ÇΩ"
                if desc:
                    text += f"\n   {desc}\n"
                else:
                    text += "\n"
            
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"manage_shop_{shop_id}"))
            
            bot.edit_message_text(
                text,
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )
            
    except telebot.apihelper.ApiTelegramException as e:
        if e.error_code == 400 and 'message is not modified' in str(e):
            pass
        else:
            logging.error(f"Callback error: {str(e)}")
            bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logging.error(f"Callback error: {str(e)}")
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)[:100]}")

def show_shop_detail(call, shop_id):
    shop_info = database.get_shop_info(shop_id)
    if not shop_info:
        bot.answer_callback_query(call.id, "–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    shop_name = shop_info[2]
    
    conn = sqlite3.connect(database.DB_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT AVG(rating), COUNT(*) FROM reviews WHERE shop_id = ?", (shop_id,))
    result = cursor.fetchone()
    conn.close()
    
    avg_rating = float(result[0] or 0)
    review_count = result[1] or 0
    rating_stars = "‚≠ê" * int(avg_rating) if avg_rating > 0 else "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"
    
    detail_text = f"""üè™ {shop_name}

‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating_stars} ({avg_rating:.1f}/5)
üìä –û—Ç–∑—ã–≤–æ–≤: {review_count}"""
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="reviews"))
    
    bot.edit_message_text(
        detail_text,
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

def show_shop_management(call, shop_id):
    shop_info = database.get_shop_info(shop_id)
    if not shop_info:
        bot.answer_callback_query(call.id, "–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    shop_name = shop_info[2]
    bot_token = shop_info[3] if shop_info[3] else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    management_text = f"""‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º: {shop_name}

üîë –¢–æ–∫–µ–Ω API: {'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if bot_token != '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"""
    
    bot.edit_message_text(
        management_text,
        call.message.chat.id,
        call.message.message_id,
        reply_markup=keyboards.create_shop_management_menu(shop_id))

@bot.callback_query_handler(func=lambda call: call.data.startswith("payment_method_"))
def payment_method_handler(call):
    shop_id = int(call.data.split("_")[-1])
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∞ –Ω–∞ –º–µ—Å—Ç–µ", callback_data=f"set_payment_cash_{shop_id}"),
        types.InlineKeyboardButton("–û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞ (–ÆKassa)", callback_data=f"set_payment_online_{shop_id}"))
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"manage_shop_{shop_id}"))
    bot.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_welcome_"))
def edit_welcome_handler(call):
    shop_id = int(call.data.split("_")[-1])
    user_states[call.from_user.id] = UserState.EDITING_WELCOME
    user_states[f"{call.from_user.id}_shop_id"] = shop_id
    
    bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤):\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=keyboards.create_back_button_menu(f"manage_shop_{shop_id}"))

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == UserState.EDITING_WELCOME)
def save_welcome_message(message):
    user_id = message.from_user.id
    shop_id = user_states.get(f"{user_id}_shop_id")
    welcome_message = message.text.strip()
    
    if welcome_message.lower() == '–Ω–∞–∑–∞–¥':
        user_states[user_id] = UserState.SHOP_MENU
        bot.send_message(
            message.chat.id,
            "‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=keyboards.create_shop_management_menu(shop_id))
        return
    
    if len(welcome_message) < 5:
        bot.send_message(message.chat.id, "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω. 5 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã")
        return
    
    if database.update_welcome_message(shop_id, welcome_message):
        bot.send_message(
            message.chat.id,
            "‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
            reply_markup=keyboards.create_shop_management_menu(shop_id))
        user_states[user_id] = UserState.SHOP_MENU
    else:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")

@bot.callback_query_handler(func=lambda call: call.data.startswith("set_payment_"))
def set_payment_handler(call):
    shop_id = int(call.data.split("_")[-1])
    payment_type = "cash_on_delivery" if call.data.startswith("set_payment_cash_") else "online"
    
    conn = sqlite3.connect(database.DB_NAME)
    cursor = conn.cursor()
    cursor.execute("UPDATE shops SET payment_method = ? WHERE id = ?", (payment_type, shop_id))
    conn.commit()
    conn.close()
    
    bot.edit_message_text(
        f"‚úÖ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {'–û–ø–ª–∞—Ç–∞ –Ω–∞ –º–µ—Å—Ç–µ' if payment_type == 'cash_on_delivery' else '–û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞'}",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=keyboards.create_shop_management_menu(shop_id))

@bot.message_handler(func=lambda message: True)
def text_handler(message):
    user_id = message.from_user.id
    user_state = user_states.get(user_id)
    
    if user_state == UserState.CREATING_SHOP:
        shop_name = message.text.strip()
        
        if shop_name.lower() == '–Ω–∞–∑–∞–¥':
            user_states[user_id] = UserState.MAIN_MENU
            bot.send_message(
                message.chat.id,
                "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=keyboards.create_main_menu())
            return
            
        if len(shop_name) < 2:
            bot.send_message(message.chat.id, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã")
            return
            
        shop_id = database.create_shop(user_id, shop_name)
        if not shop_id:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞")
            return
            
        user_states[user_id] = UserState.SHOP_MENU
        
        bot.send_message(
            message.chat.id,
            f"‚úÖ –ú–∞–≥–∞–∑–∏–Ω '{shop_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n–¢–µ–ø–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ:",
            reply_markup=keyboards.create_shop_management_menu(shop_id))
    
    elif user_state == UserState.EDITING_TOKEN:
        token = message.text.strip()
        shop_id = user_states.get(f"{user_id}_shop_id")
        
        if token.lower() == '–Ω–∞–∑–∞–¥':
            user_states[user_id] = UserState.SHOP_MENU
            bot.send_message(
                message.chat.id,
                "‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=keyboards.create_shop_management_menu(shop_id))
            return
            
        if len(token) < 30:
            bot.send_message(message.chat.id, "‚ùå –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 30 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã")
            return
            
        bot_username = database.update_shop_token(shop_id, token)
        user_states[user_id] = UserState.SHOP_MENU
        if bot_username:
            bot.send_message(
                message.chat.id,
                "‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
                reply_markup=keyboards.create_shop_management_menu(shop_id))
            
            if shop_id in active_shop_bots:
                try:
                    active_shop_bots[shop_id].stop_polling()
                except:
                    pass
                del active_shop_bots[shop_id]
            
            threading.Thread(target=shop_bot.run_shop_bot, args=(shop_id, token, database.get_shop_info(shop_id)[5]), daemon=True).start()
            active_shop_bots[shop_id] = telebot.TeleBot(token)
        else:
            bot.send_message(
                message.chat.id,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω",
                reply_markup=keyboards.create_shop_management_menu(shop_id))
    
    elif user_state == UserState.CREATING_CATEGORY:
        category_name = message.text.strip()
        shop_id = user_states.get(f"{user_id}_shop_id")
        
        if category_name.lower() == '–Ω–∞–∑–∞–¥':
            user_states[user_id] = UserState.SHOP_MENU
            bot.send_message(
                message.chat.id,
                "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=keyboards.create_shop_management_menu(shop_id))
            return
            
        if len(category_name) < 2:
            bot.send_message(message.chat.id, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã")
            return
            
        category_id = database.create_category(shop_id, category_name)
        if not category_id:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞–∑–¥–µ–ª–∞")
            return
            
        bot.send_message(
            message.chat.id,
            f"‚úÖ –†–∞–∑–¥–µ–ª '{category_name}' —Å–æ–∑–¥–∞–Ω!",
            reply_markup=keyboards.create_categories_menu(shop_id))
        user_states[user_id] = UserState.SHOP_MENU
    
    elif user_state == UserState.EDITING_CATEGORY_NAME:
        new_name = message.text.strip()
        category_id = user_states.get(f"{user_id}_category_id")
        shop_id = database.get_shop_id_by_category(category_id)
        
        if new_name.lower() == '–Ω–∞–∑–∞–¥':
            user_states[user_id] = UserState.SHOP_MENU
            bot.send_message(
                message.chat.id,
                "‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=keyboards.create_categories_menu(shop_id))
            return
            
        if len(new_name) < 2:
            bot.send_message(message.chat.id, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã")
            return
            
        if database.update_category_name(category_id, new_name):
            bot.send_message(
                message.chat.id,
                f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '{new_name}'!",
                reply_markup=keyboards.create_categories_menu(shop_id))
            user_states[user_id] = UserState.SHOP_MENU
        else:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞")
    
    elif user_state == UserState.PRODUCT_NAME:
        product_name = message.text.strip()
        if product_name.lower() == '–Ω–∞–∑–∞–¥':
            category_id = user_states.get(f"{user_id}_category_id")
            bot.send_message(
                message.chat.id,
                "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=keyboards.create_products_menu(category_id))
            user_states[user_id] = UserState.SHOP_MENU
            return
            
        if len(product_name) < 2:
            bot.send_message(message.chat.id, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã")
            return
            
        user_states[f"{user_id}_product_name"] = product_name
        user_states[user_id] = UserState.PRODUCT_PRICE
        
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ):\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã")
    
    elif user_state == UserState.PRODUCT_PRICE:
        price_text = message.text.strip()
        if price_text.lower() == '–Ω–∞–∑–∞–¥':
            user_states[user_id] = UserState.PRODUCT_NAME
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"category_{user_states.get(f'{user_id}_category_id')}"))
            bot.send_message(
                message.chat.id,
                "‚ùå –í–≤–æ–¥ —Ü–µ–Ω—ã –æ—Ç–º–µ–Ω–µ–Ω\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
                reply_markup=markup
            )
            return
            
        try:
            price = float(price_text)
            if price <= 0:
                raise ValueError()
            user_states[f"{user_id}_product_price"] = price
            user_states[user_id] = UserState.PRODUCT_DESCRIPTION
            
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_from_desc"))
            
            bot.send_message(
                message.chat.id,
                "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
                reply_markup=markup
            )
        except:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
            return
        
    elif user_state == UserState.PRODUCT_DESCRIPTION:
        description = message.text.strip()
        if description == '-':
            description = None
            
        user_states[f"{user_id}_product_description"] = description
        user_states[user_id] = UserState.PRODUCT_IMAGE
        
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("üñºÔ∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ñ–æ—Ç–æ", callback_data="default_image"),
            types.InlineKeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_image"),
            types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_from_image")
        )
        
        bot.send_message(
            message.chat.id,
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
            reply_markup=markup
        )
    elif user_state == UserState.EDITING_PRODUCT:
        edit_type = user_states.get(f"{user_id}_edit_type")
        product_id = user_states.get(f"{user_id}_product_id")
        category_id = user_states.get(f"{user_id}_category_id")
        page = user_states.get(f"{user_id}_page", 0)
        
        if message.text.strip().lower() == '–Ω–∞–∑–∞–¥':
            try:
                bot.delete_message(message.chat.id, message.message_id)
            except:
                pass
            
            bot.send_message(
                message.chat.id,
                "‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ"
            )
            bot.send_message(
                message.chat.id,
                "üì¶ –¢–æ–≤–∞—Ä—ã –≤ —Ä–∞–∑–¥–µ–ª–µ:",
                reply_markup=keyboards.create_products_menu(category_id, page))
            user_states[user_id] = UserState.SHOP_MENU
            return
        
        if edit_type == "name":
            new_name = message.text.strip()
            if len(new_name) < 2:
                bot.send_message(message.chat.id, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã")
                return
            database.update_product(product_id, name=new_name)
            bot.send_message(
                message.chat.id,
                "‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!"
            )
            bot.send_message(
                message.chat.id,
                "üì¶ –¢–æ–≤–∞—Ä—ã –≤ —Ä–∞–∑–¥–µ–ª–µ:",
                reply_markup=keyboards.create_products_menu(category_id, page))
        
        elif edit_type == "price":
            try:
                new_price = float(message.text.strip())
                if new_price <= 0:
                    raise ValueError()
                database.update_product(product_id, price=new_price)
                bot.send_message(
                    message.chat.id,
                    "‚úÖ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!"
                )
                bot.send_message(
                    message.chat.id,
                    "üì¶ –¢–æ–≤–∞—Ä—ã –≤ —Ä–∞–∑–¥–µ–ª–µ:",
                    reply_markup=keyboards.create_products_menu(category_id, page))
            except:
                bot.send_message(message.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ '–Ω–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã")
                return
        
        elif edit_type == "desc":
            new_description = message.text.strip()
            database.update_product(product_id, description=new_description)
            bot.send_message(
                message.chat.id,
                "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!"
            )
            bot.send_message(
                message.chat.id,
                "üì¶ –¢–æ–≤–∞—Ä—ã –≤ —Ä–∞–∑–¥–µ–ª–µ:",
                reply_markup=keyboards.create_products_menu(category_id, page))
        
        elif edit_type == "photo":
            text = message.text.strip().lower()
            if text == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
                bot.send_message(
                    message.chat.id,
                    "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π!"
                )
            elif text == '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ':
                database.update_product(product_id, image_path="work_photos/default_not_image.jpg")
                bot.send_message(
                    message.chat.id,
                    "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!"
                )
            else:
                bot.send_message(message.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–ø—Ü–∏—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ' –∏–ª–∏ '–Ω–∞–∑–∞–¥'")
                return
            
            bot.send_message(
                message.chat.id,
                "üì¶ –¢–æ–≤–∞—Ä—ã –≤ —Ä–∞–∑–¥–µ–ª–µ:",
                reply_markup=keyboards.create_products_menu(category_id, page))
        
        user_states[user_id] = UserState.SHOP_MENU
    else:
        bot.send_message(
            message.chat.id,
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=keyboards.create_main_menu())

@bot.message_handler(content_types=['photo'], 
                    func=lambda message: user_states.get(message.from_user.id) == UserState.PRODUCT_IMAGE)
def handle_product_image_photo(message):
    user_id = message.from_user.id
    if message.caption and message.caption.strip().lower() == '–Ω–∞–∑–∞–¥':
        user_states[user_id] = UserState.PRODUCT_DESCRIPTION
        bot.send_message(
            message.chat.id,
            "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –æ—Ç–º–µ–Ω–µ–Ω–æ\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:"
        )
        return
        
    if not os.path.exists("product_images"):
        os.makedirs("product_images")

    file_info = bot.get_file(message.photo[-1].file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    
    image_path = f"product_images/{uuid.uuid4().hex}.jpg"
    with open(image_path, 'wb') as new_file:
        new_file.write(downloaded_file)
    
    category_id = user_states.get(f"{user_id}_category_id")
    product_name = user_states.get(f"{user_id}_product_name")
    product_price = user_states.get(f"{user_id}_product_price")
    description = user_states.get(f"{user_id}_product_description")
    
    product_id = database.add_product(category_id, product_name, product_price, image_path, description)
    if not product_id:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")
        return
    
    bot.send_message(
        message.chat.id,
        f"‚úÖ –¢–æ–≤–∞—Ä '{product_name}' –¥–æ–±–∞–≤–ª–µ–Ω!"
    )
    bot.send_message(
        message.chat.id,
        "üì¶ –¢–æ–≤–∞—Ä—ã –≤ —Ä–∞–∑–¥–µ–ª–µ:",
        reply_markup=keyboards.create_products_menu(category_id))
    
    user_states[user_id] = UserState.SHOP_MENU
    for key in [f"{user_id}_category_id", f"{user_id}_product_name", 
                f"{user_id}_product_price", f"{user_id}_product_description"]:
        if key in user_states:
            del user_states[key]

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == UserState.PRODUCT_IMAGE,
                    content_types=['text'])
def handle_product_image_text(message):
    user_id = message.from_user.id
    text = message.text.strip().lower()
    category_id = user_states.get(f"{user_id}_category_id")
    product_name = user_states.get(f"{user_id}_product_name")
    product_price = user_states.get(f"{user_id}_product_price")
    description = user_states.get(f"{user_id}_product_description")
    
    if text == '–Ω–∞–∑–∞–¥':
        user_states[user_id] = UserState.PRODUCT_DESCRIPTION
        bot.send_message(
            message.chat.id,
            "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:"
        )
        return
        
    image_path = None
    if text == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        image_path = None
    elif text == '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ':
        image_path = "work_photos/default_not_image.jpg"
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–ø—Ü–∏—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ' –∏–ª–∏ '–Ω–∞–∑–∞–¥'")
        return
        
    product_id = database.add_product(category_id, product_name, product_price, image_path, description)
    if not product_id:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")
        return
        
    bot.send_message(
        message.chat.id,
        f"‚úÖ –¢–æ–≤–∞—Ä '{product_name}' –¥–æ–±–∞–≤–ª–µ–Ω!"
    )
    bot.send_message(
        message.chat.id,
        "üì¶ –¢–æ–≤–∞—Ä—ã –≤ —Ä–∞–∑–¥–µ–ª–µ:",
        reply_markup=keyboards.create_products_menu(category_id))
    
    user_states[user_id] = UserState.SHOP_MENU
    for key in [f"{user_id}_category_id", f"{user_id}_product_name", 
                f"{user_id}_product_price", f"{user_id}_product_description"]:
        if key in user_states:
            del user_states[key]

@bot.message_handler(content_types=['photo'], 
                    func=lambda message: user_states.get(message.from_user.id) == UserState.EDITING_PRODUCT and 
                                       user_states.get(f"{message.from_user.id}_edit_type") == 'photo')
def handle_edit_product_photo(message):
    user_id = message.from_user.id
    product_id = user_states.get(f"{user_id}_product_id")
    category_id = user_states.get(f"{user_id}_category_id")
    page = user_states.get(f"{user_id}_page", 0)
    
    product = database.get_product_info(product_id)
    if not product:
        bot.send_message(message.chat.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    old_image_path = product[5]
    
    if not os.path.exists("product_images"):
        os.makedirs("product_images")

    file_info = bot.get_file(message.photo[-1].file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    
    new_image_path = f"product_images/{uuid.uuid4().hex}.jpg"
    with open(new_image_path, 'wb') as new_file:
        new_file.write(downloaded_file)
    
    database.update_product(product_id, image_path=new_image_path)
    
    if old_image_path and os.path.exists(old_image_path) and "default_not_image" not in old_image_path:
        try:
            os.remove(old_image_path)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    try:
        bot.delete_message(message.chat.id, message.message_id)
    except:
        pass

    bot.send_message(
        message.chat.id,
        "‚úÖ –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!"
    )
    bot.send_message(
        message.chat.id,
        "üì¶ –¢–æ–≤–∞—Ä—ã –≤ —Ä–∞–∑–¥–µ–ª–µ:",
        reply_markup=keyboards.create_products_menu(category_id, page)
    )
    user_states[user_id] = UserState.SHOP_MENU

if __name__ == "__main__":
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    database.init_database()
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞!")
    
    print(f"–ë–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–ø—É—â–µ–Ω! –¢–æ–∫–µ–Ω: {BOT_TOKEN}")
    
    conn = sqlite3.connect(database.DB_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT id, bot_token, welcome_message FROM shops WHERE bot_token IS NOT NULL AND is_running = 1")
    shops = cursor.fetchall()
    conn.close()
    
    for shop_id, bot_token, welcome_message in shops:
        threading.Thread(target=shop_bot.run_shop_bot, args=(shop_id, bot_token, welcome_message), daemon=True).start()
        active_shop_bots[shop_id] = telebot.TeleBot(bot_token)
    
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")